Terminals unused in grammar

   IF
   ELSE
   WHILE
   ASSIGN
   EQ
   NEQ
   LT
   LTE
   GT
   GTE
   PLUS
   MINUS
   TIMES
   OVER
   LPAREN
   RPAREN
   LBRACE
   RBRACE
   COMMA
   ENDFILE
   ERROR
   RETURN
   '-'
   '+'
   '*'
   '/'


Grammar

    0 $accept: program $end

    1 program: declaration_list

    2 declaration_list: declaration_list declaration
    3                 | declaration

    4 declaration: var_declaration

    5 $@1: /* empty */

    6 var_declaration: type_specifier ID $@1 var_declaration_

    7 var_declaration_: SEMI

    8 $@2: /* empty */

    9 var_declaration_: LBRACK NUM $@2 RBRACK SEMI

   10 type_specifier: INT
   11               | VOID


Terminals, with rules where they appear

$end (0) 0
'*' (42)
'+' (43)
'-' (45)
'/' (47)
error (256)
IF (258)
ELSE (259)
WHILE (260)
ID (261) 6
NUM (262) 9
ASSIGN (263)
EQ (264)
NEQ (265)
LT (266)
LTE (267)
GT (268)
GTE (269)
PLUS (270)
MINUS (271)
TIMES (272)
OVER (273)
LPAREN (274)
RPAREN (275)
LBRACK (276) 9
RBRACK (277) 9
LBRACE (278)
RBRACE (279)
SEMI (280) 7 9
COMMA (281)
ENDFILE (282)
ERROR (283)
INT (284) 10
RETURN (285)
VOID (286) 11


Nonterminals, with rules where they appear

$accept (36)
    on left: 0
program (37)
    on left: 1, on right: 0
declaration_list (38)
    on left: 2 3, on right: 1 2
declaration (39)
    on left: 4, on right: 2 3
var_declaration (40)
    on left: 6, on right: 4
$@1 (41)
    on left: 5, on right: 6
var_declaration_ (42)
    on left: 7 9, on right: 6
$@2 (43)
    on left: 8, on right: 9
type_specifier (44)
    on left: 10 11, on right: 6


state 0

    0 $accept: . program $end

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    program           go to state 3
    declaration_list  go to state 4
    declaration       go to state 5
    var_declaration   go to state 6
    type_specifier    go to state 7


state 1

   10 type_specifier: INT .

    $default  reduce using rule 10 (type_specifier)


state 2

   11 type_specifier: VOID .

    $default  reduce using rule 11 (type_specifier)


state 3

    0 $accept: program . $end

    $end  shift, and go to state 8


state 4

    1 program: declaration_list .
    2 declaration_list: declaration_list . declaration

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    $default  reduce using rule 1 (program)

    declaration      go to state 9
    var_declaration  go to state 6
    type_specifier   go to state 7


state 5

    3 declaration_list: declaration .

    $default  reduce using rule 3 (declaration_list)


state 6

    4 declaration: var_declaration .

    $default  reduce using rule 4 (declaration)


state 7

    6 var_declaration: type_specifier . ID $@1 var_declaration_

    ID  shift, and go to state 10


state 8

    0 $accept: program $end .

    $default  accept


state 9

    2 declaration_list: declaration_list declaration .

    $default  reduce using rule 2 (declaration_list)


state 10

    6 var_declaration: type_specifier ID . $@1 var_declaration_

    $default  reduce using rule 5 ($@1)

    $@1  go to state 11


state 11

    6 var_declaration: type_specifier ID $@1 . var_declaration_

    LBRACK  shift, and go to state 12
    SEMI    shift, and go to state 13

    var_declaration_  go to state 14


state 12

    9 var_declaration_: LBRACK . NUM $@2 RBRACK SEMI

    NUM  shift, and go to state 15


state 13

    7 var_declaration_: SEMI .

    $default  reduce using rule 7 (var_declaration_)


state 14

    6 var_declaration: type_specifier ID $@1 var_declaration_ .

    $default  reduce using rule 6 (var_declaration)


state 15

    9 var_declaration_: LBRACK NUM . $@2 RBRACK SEMI

    $default  reduce using rule 8 ($@2)

    $@2  go to state 16


state 16

    9 var_declaration_: LBRACK NUM $@2 . RBRACK SEMI

    RBRACK  shift, and go to state 17


state 17

    9 var_declaration_: LBRACK NUM $@2 RBRACK . SEMI

    SEMI  shift, and go to state 18


state 18

    9 var_declaration_: LBRACK NUM $@2 RBRACK SEMI .

    $default  reduce using rule 9 (var_declaration_)
